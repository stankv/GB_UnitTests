#from unittest import TestCase

import pytest

from comparison_averages import CompAvg


def test_average():
    # ПРОВЕРКА Ф-ИИ ВЫЧИСЛЕНИЯ СРЕДНЕГО ЗНАЧЕНИЯ find_average().
    assert CompAvg.find_average([]) == 0, "#1. Не работает для пустого массива."
    assert CompAvg.find_average([5]) == 5, "#2. Не работает для массива с одним элементом."
    assert CompAvg.find_average([1, 2, 3, 4, 5]) == 3, "#3. Не верно вычисляется значение среднего."

    # ПРОВЕРКА Ф-ИИ СРАВНЕНИЯ СРЕДНИХ ЗНАЧЕНИЙ compare_averages().
    # Один из списков имеет большее среднее значение:
    assert CompAvg.compare_averages([4, 5, 6], [1, 2, 3]) == "Первый список имеет большее среднее значение", \
        "#4. Не работает когда среднее значение первого списка больше."
    assert CompAvg.compare_averages([1, 2, 3], [4, 5, 6]) == "Второй список имеет большее среднее значение",\
        "#5. Не работает когда среднее значение второго списка больше."
        # Проверка для отрицательных значений элементов списков:
    assert CompAvg.compare_averages([-1, -2, -3], [-4, -5, -6]) == "Первый список имеет большее среднее значение", \
        "#6. Оба отрицательные. Не работает когда среднее значение первого списка больше."
    assert CompAvg.compare_averages([-1, -2, -3], [1, 2, 3]) == "Второй список имеет большее среднее значение", \
        "#7. Первый отрицательный. Не работает когда среднее значение второго списка больше."
    assert CompAvg.compare_averages([-4, -5, -6], [-1, -2, -3]) == "Второй список имеет большее среднее значение", \
        "#8. Оба отрицательные. Не работает когда среднее значение второго списка больше."

    # Проверка функции сравнения средних значений, когда один из списков пуст:
    assert CompAvg.compare_averages([1, 2, 3, 4, 5], []) == "Первый список имеет большее среднее значение", \
        "#9. Не работает когда второй список пуст."
    assert CompAvg.compare_averages([], [1, 2, 3, 4, 5]) == "Второй список имеет большее среднее значение", \
        "#10. Не работает когда первый список пуст."

    # Средние значения обоих списков равны:
    assert CompAvg.compare_averages([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == "Средние значения равны", \
        "#11. Не работает когда средние значения обоих списков равны."
    assert CompAvg.compare_averages([], []) == "Средние значения равны", \
        "#4. Не работает когда оба списка пусты."
